var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/devenv/docs/lifecycle/",title:"devenv lifcycle",description:"Common commands when running the devenv and how to interact with one",content:"To destroy the developer environment, including data in databases:\ndevenv destroy  To stop the developer environment (which persists the state of the environment, unlike devenv destroy):\ndevenv stop  To restart the developer environment after stopping it:\ndevenv start  To initialize a new developer environment (this exits immediately if it detects that a dev-environment has already started to be provisioned):\ndevenv provision  To deploy additional services, use the devenv apps deploy $APP_NAME flag, where $APP_NAME is the name of your service\u0026rsquo;s GitHub repository. Every bootstrap (coming soon!)-created service can be deployed into this environment without any extra configuration.\nRun devenv provision --help for documentation on additional ways to customize the provisioning process.\n"}).add({id:1,href:"/devenv/docs/",title:"Docs",description:"Documentation for the devenv",content:""}).add({id:2,href:"/devenv/docs/services/services/",title:"Interacting with Services",description:"How to interact with services in a devenv",content:"Deploying a Service #\rTo deploy a service into your developer environment, run devenv apps deploy \u0026lt;appName\u0026gt;.\nNote: By default tags are used for deployments, if present. Otherwise the latest commit is used. If you wish to ignore tags and use the latest commit instead set the topic release-type-commits on your repository. Though note this is unsupported and only provided for projects that haven\u0026rsquo;t yet moved to tags.\nDeploying a Specific Revision #\rTo deploy a specific revision of a service, run devenv apps deploy \u0026lt;appName@CommitOrTag\u0026gt;.\nDeploying Local Changes #\rTo deploy your application into Kubernetes locally, run devenv apps deploy ..\nUpdating Services #\rThere are two commands that can update an application in your developer environment, depending on the version you want.\nUpdating to the Latest Version #\rdevenv apps update \u0026lt;appName\u0026gt; for a single application, devenv apps update to update all applications.\nRunning a Local Service #\rIf you want to run any code locally that needs to pretend it\u0026rsquo;s inside the cluster, you will need to use our tunnel command.\ndevenv tunnel  Exposing Your Local Service to the Developer Environment #\rIf you have a service running happily in the dev environment that you want to start a develop/build/test iteration cycle on locally, you can use devenv local-app to start a tunnel from Kubernetes to your local service. Run the following to substitute the Kubernetes-deployed service:\ndevenv local-app [serviceName]  Note: serviceName is generally the name of the repository of the service you want to switch Note: If your service is not a Bootstrap application, you may need to supply --namespace \u0026lt;namespace\u0026gt;.\nMapping a port #\rBy default, the local port and the remote port are the same. If you need to expose a different local port for the remote port, please use --port \u0026lt;local port\u0026gt;:\u0026lt;remote port\u0026gt;. For example, use --port 8080:80 to expose the local port 8080 as port 80 in the dev environment.\n"}).add({id:3,href:"/devenv/docs/services/",title:"Services",description:"Documentation for service development in a devenv",content:""}).add({id:4,href:"/devenv/docs/system-requirements/",title:"System Requirements",description:"Lists the requirements for running a devenv",content:"macOS #\rMake sure that Homebrew is installed, then download the Brewfile, and run with it in the current directory:\nbrew bundle  Linux / WSL2 #\rInstall the following:\n jq: sudo apt install jq Docker  "}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()